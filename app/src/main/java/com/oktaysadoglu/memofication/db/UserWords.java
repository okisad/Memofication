package com.oktaysadoglu.memofication.db;

import com.oktaysadoglu.memofication.db.DaoSession;

import java.io.Serializable;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER_WORDS".
 */
public class UserWords implements Serializable{

    private Long id;
    private Long word_id;
    private Integer count;
    private Integer is_on_notification;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserWordsDao myDao;

    private Word word;
    private Long word__resolvedKey;


    public UserWords() {
    }

    public UserWords(Long id) {
        this.id = id;
    }

    public UserWords(Long id, Long word_id, Integer count, Integer is_on_notification) {
        this.id = id;
        this.word_id = word_id;
        this.count = count;
        this.is_on_notification = is_on_notification;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserWordsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getWord_id() {
        return word_id;
    }

    public void setWord_id(Long word_id) {
        this.word_id = word_id;
    }

    public Integer getCount() {
        return count;
    }

    public void setCount(Integer count) {
        this.count = count;
    }

    public Integer getIs_on_notification() {
        return is_on_notification;
    }

    public void setIs_on_notification(Integer is_on_notification) {
        this.is_on_notification = is_on_notification;
    }

    /** To-one relationship, resolved on first access. */
    public Word getWord() {
        Long __key = this.word_id;
        if (word__resolvedKey == null || !word__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WordDao targetDao = daoSession.getWordDao();
            Word wordNew = targetDao.load(__key);
            synchronized (this) {
                word = wordNew;
            	word__resolvedKey = __key;
            }
        }
        return word;
    }

    public void setWord(Word word) {
        synchronized (this) {
            this.word = word;
            word_id = word == null ? null : word.getId();
            word__resolvedKey = word_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public String toString() {
        return "UserWords{" +
                "id=" + id +
                ", word_id=" + word_id +
                ", count=" + count +
                ", is_on_notification=" + is_on_notification +
                ", word=" + word +
                '}';
    }
}
